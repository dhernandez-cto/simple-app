name: Creating Release Candidate

on:
  push:
    branches:
      - 'main'
jobs:

  prepare-pom:
    name: Preparing Release Candidate
    runs-on: ubuntu-latest
    outputs:
      new_sha: ${{ steps.sha.outputs.SHA }}
      new_version: ${{ steps.project-new-version.outputs.newversion }}
      next_rc_number: ${{steps.next-rc-number.outputs.next-tag-number}}
      new_tag: ${{steps.next-rc-number.outputs.new-tag}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: debug
        run: |
          pwd
          ls -la .
          ls -la .github
          
      - name: Private Action Loader
        uses: actions/checkout@v2
        with:
          # Access token with read access to the repo containing action
          token: ${{secrets.PAT}}
          # The organization/user and repo where action is stored, with support for @ref
          repository: santander-group/git-tag-counter-action
          ref: 'e268df0f68f566e78754db71ea8eaaa0683040db'
          path: '.github/actions/'

      - name: debug
        run: |
          ls -la .github/actions
          ls -la ./.github/actions/git-tag-counter-action
          
      - name: Extract Maven project version
        id: project-version
        run: echo ::set-output name=version::$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)

      - name: Display current version
        run: echo ${{steps.project-version.outputs.version}}

      - name: Calculating new version
        id: project-new-version
        run: echo ::set-output name=newversion::$(sed -e 's/-SNAPSHOT//g' <<< ${{steps.project-version.outputs.version}})

      - name: Display new version
        run: echo ${{steps.project-new-version.outputs.newversion}} 

      - name: removing snapshot pom.xml
        run: ./mvnw versions:set -DnewVersion=${{steps.project-new-version.outputs.newversion}} -DgenerateBackupPoms=false -q
      
      - name: Display version from pom.xml
        run: |
          mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec
          cat pom.xml | grep ${{steps.project-new-version.outputs.newversion}}

      - name: debug
        run: |
          pwd
          ls -la .
          ls -la .github
          ls -la .github/actions
          ls -la .github/actions/git-tag-counter-action
          
      - name: Retrieving next RC number
        id: next-rc-number
        uses: ./.github/actions/git-tag-counter-action
        with:
          version: ${{steps.project-new-version.outputs.newversion}}-RC
      
      - name: Display next release candidate version
        run: |
          echo ${{ steps.next-rc-number.outputs.next-tag-number }}
          echo ${{ steps.next-rc-number.outputs.new-tag }}
      
      - name: deleting local actions.
        run: rm -rf .github/actions/
          
      # hacer que este commit estÃ© verificado
      - name: Commiting pom.xml
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -am '[GitHub Actions] removing -SNAPSHOT from pom.xml'
          git push

      - name: Get last commit sha
        id: sha
        run: |
          sha_new=$(git rev-parse HEAD)
          echo $sha_new
          echo "::set-output name=SHA::$sha_new"

  bump-dev-version:
    name: Bumping next development version
    needs: prepare-pom
    runs-on: ubuntu-latest
    steps:
      - name: Mocking development version bump
        run: echo "Bumping next development version"
  
  create-tag:
    needs: prepare-pom
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare-pom.outputs.new_sha }}
          fetch-depth: 0

      - name: Creating the tag
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ needs.prepare-pom.outputs.new_tag }}",
              sha: "${{ needs.prepare-pom.outputs.new_sha }}"
            })

#context.sha
  build:
    needs: prepare-pom
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ needs.prepare-pom.outputs.new_sha }}
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
      
    - name: Build with Maven
      run: mvn -B clean verify --file pom.xml

  deploy-preproduction:
    needs: build
    runs-on: ubuntu-latest
    env:
      APPLICATION_NAME: "poc-app"
    steps:
      - name: Deploy to Preproduction
        run: echo "Deploying to development $APPLICATION_NAME-"
